# 1-my_list.txt

=======================
How to use 1-my_list.py
=======================

This module defines a class ``MyList`` which inherits from the built-in ``list`` class

Instansiation / Invocation
==========================

You can instansiate ``MyList`` without arguments which will return an empty list.

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> issubclass(MyList, list)
    True
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> print(my_list)
    []

::

When instantiating, you can pass an iterable as argument.
Examples of iterables are arrays or list, tuples, dictionaries, strings etc.
NB: You can pass only one iterable, if you pass more than one a TypeError is raised.
Also if you pass anything other than an iterable, a TypeError is raised as well.

::

    >>> my_list = MyList([1, 2, 3, 4])
    >>> my_list
    [1, 2, 3, 4]
    >>> my_list = MyList('abcde')
    >>> my_list
    ['a', 'b', 'c', 'd', 'e']
    >>> my_list = MyList((1, 2, 3))
    >>> my_list
    [1, 2, 3]
    >>> my_list = MyList({'a': 1, 'b': 2})
    >>> my_list
    ['a', 'b']
    >>> my_list = MyList([1,3,2], [1, 2, 3])
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2
    >>> my_list = MyList(1)
    Traceback (most recent call last):
    TypeError: 'int' object is not iterable

::

Since we MyList inherits from the list class, we can access the methods and attributes
that the list class has.

Appending to an instance of MyList
==================================

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(3)
    >>> my_list.append([1,2,3])
    >>> my_list
    [1, 3, [1, 2, 3]]

::

Accessing elements of MyList using positionl values
===================================================

::

    >>> my_list[0]
    1
    >>> my_list[-1]
    [1, 2, 3]
    >>> my_list[2]
    [1, 2, 3]
    >>> my_list[5]
    Traceback (most recent call last):
    IndexError: list index out of range

::

print_sorted method
===================

This print_sorted method of the MyList class prints the elements MyList in 
ascending order.

::

    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'list' and 'int'
    >>> my_list = MyList([1, 2, 4, 6, 1, 4, 6, 10, 34])
    >>> my_list.print_sorted()
    [1, 1, 2, 4, 4, 6, 6, 10, 34]

::